#---------------------------------------------
# User 
#---------------------------------------------
GET http://localhost:3000/api/users HTTP/1.1
content-type: application/json
###

POST http://localhost:3000/api/users HTTP/1.1
content-type: application/json

{
    "name": "Name-01",
    "email": "name01@email.com"
}
###
POST http://localhost:3000/api/users/users HTTP/1.1
content-type: application/json

{
    "name": "Name-01",
    "email": "name01@email.com",   
    "name2": "Name-02",
    "email2": ""
}
###


#---------------------------------------------
# Order 
#---------------------------------------------#
// get all
GET http://localhost:3000/api/orders HTTP/1.1
content-type: application/json
###

// get by Id
GET http://localhost:3000/api/orders/192 HTTP/1.1
content-type: application/json
###

// createOrder 
POST http://localhost:3000/api/orders HTTP/1.1
content-type: application/json

{
    "productId": "Product-01",
    "amount": 99.5
}
###

// updateOrder
// the update code will delay for a few seconds between select and update
// to similate optimistic lock error, send 2 requests in quick succession, take note to change the 'amount' number each time (to make the entity dirty in order to trigger a update sql)
POST http://localhost:3000/api/orders/192 HTTP/1.1
content-type: application/json

{
    "productId": "Product-02",
    "amount": 232.5
}
###

#---------------------------------------------
# Transaction 
#---------------------------------------------

// createOrderWithPayment
// To make insert of first order+payment pair fail, input 'amount' as > 99999 or as a negative number
// To make insert of second order+payment pair fail, input 'amount2' as > 99999 or as a negative number
POST http://localhost:3000/api/orders/createOrderWithPayment  HTTP/1.1
content-type: application/json

{
    
    "productId": "Product-11",
    "amount": 99999,
    "productId2": "Product-12",
    "amount2": 99999
}
###
// createOrderWithPayments
// To make insert of first order+payment pair fail, input 'amount' as > 99999 or as a negative number
// To make insert of second order+payment pair fail, input 'amount2' as > 99999 or as a negative number
POST http://localhost:3000/api/orders/createOrderWithPayments HTTP/1.1
content-type: application/json

{
    
    "productId": "Product-11",
    "amount": 99999,
    "productId2": "Product-12",
    "amount2": 99999
}
###

// createUserWithOrderAndPayment
// To make insert of user 1 fail, input 'email' as a >20 char
// To make insert of order+payment fail, input 'amount' as a negative number
// To make insert of user 2 fail, input 'email' as a 0 char
POST http://localhost:3000/api/users/createUserWithOrderAndPayment HTTP/1.1
content-type: application/json

{
    "name": "Name-11",
    "email": "",
    "productId": "Product-12",
    "amount": 2345.5
}
###
// createUserWithOptionalOrderAndPayment
// To make insert of user fail, input 'email' as a >20 char or empty
// To make insert of second order+payment pair fail, input 'amount2' as > 99999 or as a negative number

POST http://localhost:3000/api/users/createUserWithOptionalOrderAndPayment HTTP/1.1
content-type: application/json

{
    
    "name": "Name-11",
    "email": "name11@email.com",
    "productId": "Product-12",
    "amount": 2345.5
}
###


// createUserWithOrder
POST http://localhost:3000/api/users/69/orders HTTP/1.1
content-type: application/json

{ 
     "productId": "1",
    "amount": 22345.5

}
###